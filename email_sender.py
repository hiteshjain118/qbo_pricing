from datetime import datetime
import logging
import os
import base64

import pytz
import requests
import resend
from logging_config import setup_logging

# Setup logging
setup_logging()
logger = logging.getLogger(__name__)

resend.api_key = os.getenv('RESEND_API_KEY')

class CompanyEmailSender:
    def __init__(self, email_to: str, subject: str, company_id: str):
        self.email_to = email_to
        self.subject = subject
        self.company_id = company_id

    def send_email(self, report_html: str, report_excel: str) -> bool:
        return self.send_using_mailgun(report_html, report_excel)
    
    def send_using_resend(self, report_html: str, report_excel: str) -> bool:
        logger.info(
            f"Sending email with resend to {self.email_to}"
            f"with subject {self.subject}"
            f"and report html {len(report_html)} chars"
        )
        
        try:
            # Prepare attachment data
            attachment_data = {
                "filename": f"pricing_delta_{self.company_id}.xlsx",
                "content": report_excel
            }
            
            response = resend.Emails.send({
                "from": "QBO Reports <onboarding@resend.dev>",
                "to": [self.email_to],
                "subject": self.subject,
                "html": self.get_email_html(report_html),
                "attachments": [attachment_data]
            })
            
            logger.info(f"Resend response: {response}")
            return response is not None
        except Exception as e:
            logger.error(f"Error sending email: {e}")
            raise e

    def get_email_html(self, report_html: str):
        return f"""
<html>  
<body>
QuickBooks Report for {self.company_id}

Generated: {datetime.now().astimezone(pytz.timezone('America/Los_Angeles')).strftime('%Y-%m-%d %H:%M:%S')}

{report_html}

---
This report was automatically generated by the QBO Report Scheduler.
</body>
</html>
        """
    
    def send_using_mailgun(self, report_html: str, report_excel: str) -> bool:
        logger.info(
            f"Sending email with mailgun to {self.email_to}"
            f"with subject {self.subject}"
            f"and report html {len(report_html)} chars"
        )
        try:
            domain = "coralbricks.ai"
            
            # For Mailgun, we need to decode base64 and send as file
            files = None
            if report_excel:
                try:
                    excel_data = base64.b64decode(report_excel)
                    files = {
                        'attachment': (
                            f'pricing_delta_{self.company_id}.xlsx',
                            excel_data,
                            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                        )
                    }
                except Exception as e:
                    logger.error(f"Error decoding Excel data: {e}")
            
            data = {
                "from": f"QBO Reports <noreply@{domain}>",
                "to": self.email_to,
                "subject": self.subject,
                "html": self.get_email_html(report_html)
            }
            
            response = requests.post(
                f"https://api.mailgun.net/v3/{domain}/messages",
                auth=("api", os.getenv('MAILGUN_API_KEY', 'API_KEY')),
                data=data,
                files=files
            )
            logger.info(f"Mailgun response: {response.json()}")
            return response.json().get('message') == 'Queued. Thank you.'
        except Exception as e:
            logger.error(f"Error sending email: {e}")
            raise e