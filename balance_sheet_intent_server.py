import traceback
from typing import Optional, Dict, Any
from qbo_api import QuickBooksOnlineAPI
from oauth_manager import QBOOAuthManager
from qbo_request_auth_params import QBORequestAuthParams
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib
import os
import logging
import resend
from logging_config import setup_logging

# Setup logging
setup_logging()
logger = logging.getLogger(__name__)

class BalancesheetIntentServer:
    
    def __init__(self, auth_params: QBORequestAuthParams, realm_id: str, resend_api_key: str):
        self.auth_params = auth_params
        self.oauth_manager = QBOOAuthManager(auth_params)
        self.realm_id = realm_id
        resend.api_key = resend_api_key

    def get_balance_sheet(self) -> Optional[str]:
        """Get balance sheet report for a company"""
        # Get valid access token
        
        # Initialize QBO API
        access_token = self.oauth_manager.get_valid_access_token(self.realm_id)
        qbo = QuickBooksOnlineAPI(self.auth_params, self.realm_id, access_token)
        
        # Query Balance Sheet
        try:
            logger.info(f"Making API call to get balance sheet for company {self.realm_id}")
            balance_sheet = qbo.query_balance_sheet_report()
            logger.info(f"Raw balance sheet data: {balance_sheet}")
            formatted = qbo.format_balance_sheet(balance_sheet)
            logger.info(f"Formatted balance sheet: {len(formatted)} characters")
            return formatted
        except Exception as e:
            #print stack trace
            logging.error(f"Error querying balance sheet for company {self.realm_id}: {e}")
            logging.error(traceback.format_exc())
            # logging.error(f"Error querying balance sheet for company {self.realm_id}: {e}")
            return None
            
    
    def send_email_report(self, email: str, report_data: str) -> bool:
        """Send email with report data using Resend"""
        logger.info(f"Sending email to {email} with report for company {self.realm_id} and report data: {len(report_data)} characters")
        body = f"""
QuickBooks Balance Sheet Report

Company ID: {self.realm_id}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{report_data}

---
This report was automatically generated by the QBO Report Scheduler.
        """
        
        # Send email using Resend
        response = resend.Emails.send({
            "from": "QBO Reports <onboarding@resend.dev>",
            "to": [email],
            "subject": f"QuickBooks Balance Sheet Report - {self.realm_id}",
            "text": body
        })
        
        print(f"✅ Email sent successfully to {email} via Resend")
        print(f"Email ID: {response['id']}")
        return True
        
    def generate_and_send_report(self, email: str) -> bool:
        """Generate balance sheet report and send via email"""
        print(f"Generating report for company {self.realm_id}")
        
        # Get balance sheet data
        balance_sheet = self.get_balance_sheet()
        
        if not balance_sheet:
            print(f"Failed to retrieve balance sheet for company {self.realm_id}")
            return False
        logger.info(f"Balance sheet retrieved for company {self.realm_id} balance sheet: {len(balance_sheet)} characters")
        # Send email
        if self.send_email_report(email, balance_sheet):
            print(f"✅ Report sent to {email} for company {self.realm_id}")
            return True
        else:
            print(f"❌ Failed to send report to {email} for company {self.realm_id}")
            return False
